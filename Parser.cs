// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-CJLAR38
// DateTime: 09.06.2020 13:18:18
// UserName: MayRe
// Input file <D:\MINICompiler\kompilator.y - 09.06.2020 13:18:18>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MINICompiler;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,And=5,Or=6,
    Comparison=7,Add=8,Sub=9,Mult=10,Div=11,BitOr=12,
    BitAnd=13,Minus=14,Tilde=15,Not=16,IntCast=17,DoubleCast=18,
    Program=19,Write=20,Read=21,If=22,Else=23,While=24,
    Return=25,Endl=26,OpenPar=27,ClosePar=28,OpenBracket=29,CloseBracket=30,
    Semicolon=31,Eof=32,Error=33,Int=34,Double=35,Bool=36,
    Variable=37,IntVal=38,DoubleVal=39,BoolVal=40,String=41};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<Node,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public Node yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Node val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[43];
  private static State[] states = new State[68];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "spaces", "block", "Anon@1", "lines", "instruction", 
      "Anon@2", "Anon@3", "init", "assign", "write", "read", "exp", "parExp", 
      "comp", "cast", "if", };

  static Parser() {
    states[0] = new State(new int[]{19,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{26,67,29,-3},new int[]{-3,4});
    states[4] = new State(new int[]{29,7},new int[]{-4,5});
    states[5] = new State(new int[]{32,6});
    states[6] = new State(-2);
    states[7] = new State(-5,new int[]{-5,8});
    states[8] = new State(new int[]{34,16,35,18,36,20,37,24,20,55,21,60,27,38,38,43,39,44,40,45,17,47,18,50,26,64,30,-7},new int[]{-6,9,-7,11,-10,14,-11,22,-12,53,-13,58,-14,62,-15,37,-16,41,-17,46});
    states[9] = new State(new int[]{30,10});
    states[10] = new State(-6);
    states[11] = new State(-8,new int[]{-8,12});
    states[12] = new State(new int[]{34,16,35,18,36,20,37,24,20,55,21,60,27,38,38,43,39,44,40,45,17,47,18,50,26,64,30,-7},new int[]{-6,13,-7,11,-10,14,-11,22,-12,53,-13,58,-14,62,-15,37,-16,41,-17,46});
    states[13] = new State(-9);
    states[14] = new State(new int[]{31,15});
    states[15] = new State(-12);
    states[16] = new State(new int[]{37,17});
    states[17] = new State(-20);
    states[18] = new State(new int[]{37,19});
    states[19] = new State(-21);
    states[20] = new State(new int[]{37,21});
    states[21] = new State(-22);
    states[22] = new State(new int[]{31,23});
    states[23] = new State(-13);
    states[24] = new State(new int[]{4,25,31,-31,8,-31,9,-31,10,-31,11,-31,7,-31});
    states[25] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,26,-15,37,-16,41,-17,46});
    states[26] = new State(new int[]{8,27,9,29,10,31,11,33,7,35,31,-23});
    states[27] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,28,-15,37,-16,41,-17,46});
    states[28] = new State(new int[]{8,-26,9,-26,10,31,11,33,7,-26,31,-26,28,-26});
    states[29] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,30,-15,37,-16,41,-17,46});
    states[30] = new State(new int[]{8,-27,9,-27,10,31,11,33,7,-27,31,-27,28,-27});
    states[31] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,32,-15,37,-16,41,-17,46});
    states[32] = new State(-28);
    states[33] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,34,-15,37,-16,41,-17,46});
    states[34] = new State(-29);
    states[35] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,36,-15,37,-16,41,-17,46});
    states[36] = new State(new int[]{8,27,9,29,10,31,11,33,7,-40,31,-40,28,-40});
    states[37] = new State(-25);
    states[38] = new State(new int[]{27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,39,-15,37,-16,41,-17,46});
    states[39] = new State(new int[]{28,40,8,27,9,29,10,31,11,33,7,35});
    states[40] = new State(-24);
    states[41] = new State(-30);
    states[42] = new State(-31);
    states[43] = new State(-32);
    states[44] = new State(-33);
    states[45] = new State(-34);
    states[46] = new State(-35);
    states[47] = new State(new int[]{37,48,27,38},new int[]{-15,49});
    states[48] = new State(-36);
    states[49] = new State(-37);
    states[50] = new State(new int[]{37,51,27,38},new int[]{-15,52});
    states[51] = new State(-38);
    states[52] = new State(-39);
    states[53] = new State(new int[]{31,54});
    states[54] = new State(-14);
    states[55] = new State(new int[]{41,56,27,38,37,42,38,43,39,44,40,45,17,47,18,50},new int[]{-14,57,-15,37,-16,41,-17,46});
    states[56] = new State(-17);
    states[57] = new State(new int[]{8,27,9,29,10,31,11,33,7,35,31,-18});
    states[58] = new State(new int[]{31,59});
    states[59] = new State(-15);
    states[60] = new State(new int[]{37,61});
    states[61] = new State(-19);
    states[62] = new State(new int[]{31,63,8,27,9,29,10,31,11,33,7,35});
    states[63] = new State(-16);
    states[64] = new State(-10,new int[]{-9,65});
    states[65] = new State(new int[]{34,16,35,18,36,20,37,24,20,55,21,60,27,38,38,43,39,44,40,45,17,47,18,50,26,64,30,-7},new int[]{-6,66,-7,11,-10,14,-11,22,-12,53,-13,58,-14,62,-15,37,-16,41,-17,46});
    states[66] = new State(-11);
    states[67] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{19,-3,-4,32});
    rules[3] = new Rule(-3, new int[]{});
    rules[4] = new Rule(-3, new int[]{26});
    rules[5] = new Rule(-5, new int[]{});
    rules[6] = new Rule(-4, new int[]{29,-5,-6,30});
    rules[7] = new Rule(-6, new int[]{});
    rules[8] = new Rule(-8, new int[]{});
    rules[9] = new Rule(-6, new int[]{-7,-8,-6});
    rules[10] = new Rule(-9, new int[]{});
    rules[11] = new Rule(-6, new int[]{26,-9,-6});
    rules[12] = new Rule(-7, new int[]{-10,31});
    rules[13] = new Rule(-7, new int[]{-11,31});
    rules[14] = new Rule(-7, new int[]{-12,31});
    rules[15] = new Rule(-7, new int[]{-13,31});
    rules[16] = new Rule(-7, new int[]{-14,31});
    rules[17] = new Rule(-12, new int[]{20,41});
    rules[18] = new Rule(-12, new int[]{20,-14});
    rules[19] = new Rule(-13, new int[]{21,37});
    rules[20] = new Rule(-10, new int[]{34,37});
    rules[21] = new Rule(-10, new int[]{35,37});
    rules[22] = new Rule(-10, new int[]{36,37});
    rules[23] = new Rule(-11, new int[]{37,4,-14});
    rules[24] = new Rule(-15, new int[]{27,-14,28});
    rules[25] = new Rule(-14, new int[]{-15});
    rules[26] = new Rule(-14, new int[]{-14,8,-14});
    rules[27] = new Rule(-14, new int[]{-14,9,-14});
    rules[28] = new Rule(-14, new int[]{-14,10,-14});
    rules[29] = new Rule(-14, new int[]{-14,11,-14});
    rules[30] = new Rule(-14, new int[]{-16});
    rules[31] = new Rule(-14, new int[]{37});
    rules[32] = new Rule(-14, new int[]{38});
    rules[33] = new Rule(-14, new int[]{39});
    rules[34] = new Rule(-14, new int[]{40});
    rules[35] = new Rule(-14, new int[]{-17});
    rules[36] = new Rule(-17, new int[]{17,37});
    rules[37] = new Rule(-17, new int[]{17,-15});
    rules[38] = new Rule(-17, new int[]{18,37});
    rules[39] = new Rule(-17, new int[]{18,-15});
    rules[40] = new Rule(-16, new int[]{-14,7,-14});
    rules[41] = new Rule(-18, new int[]{22,27,-16,28,-4});
    rules[42] = new Rule(-18, new int[]{22,27,-16,28,-4,23,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, spaces, block, Eof
#line 23 "D:\MINICompiler\kompilator.y"
    {					
					Compiler.ProgramTree.block = blockStack.Pop();
				}
#line default
        break;
      case 4: // spaces -> Endl
#line 28 "D:\MINICompiler\kompilator.y"
           {inc(); }
#line default
        break;
      case 5: // Anon@1 -> /* empty */
#line 31 "D:\MINICompiler\kompilator.y"
     {
						BlockNode node = new BlockNode();
						blockStack.Push(node);
						node.line = line;
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 8: // Anon@2 -> /* empty */
#line 41 "D:\MINICompiler\kompilator.y"
                  { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; blockStack.Peek().lines.Add(ValueStack[ValueStack.Depth-1]); }
#line default
        break;
      case 10: // Anon@3 -> /* empty */
#line 42 "D:\MINICompiler\kompilator.y"
           {inc();}
#line default
        break;
      case 17: // write -> Write, String
#line 51 "D:\MINICompiler\kompilator.y"
     {
						WriteNode node = new WriteNode(line);
						node.content = ValueStack[ValueStack.Depth-1];
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 18: // write -> Write, exp
#line 57 "D:\MINICompiler\kompilator.y"
     {
						WriteNode node = new WriteNode(line);
						node.content = ValueStack[ValueStack.Depth-1];
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 20: // init -> Int, Variable
#line 66 "D:\MINICompiler\kompilator.y"
     {
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "int";
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 21: // init -> Double, Variable
#line 73 "D:\MINICompiler\kompilator.y"
     {
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "double";
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 22: // init -> Bool, Variable
#line 80 "D:\MINICompiler\kompilator.y"
     {
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "bool";
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 23: // assign -> Variable, Assign, exp
#line 88 "D:\MINICompiler\kompilator.y"
     {
						AssignNode node = new AssignNode();
						node.left = (VariableNode)ValueStack[ValueStack.Depth-3];
						node.right = ValueStack[ValueStack.Depth-1];
						node.line = line;
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 24: // parExp -> OpenPar, exp, ClosePar
#line 97 "D:\MINICompiler\kompilator.y"
     {
						ParenthesisNode node = new ParenthesisNode();
						node.content = ValueStack[ValueStack.Depth-2];
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 26: // exp -> exp, Add, exp
#line 106 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 27: // exp -> exp, Sub, exp
#line 111 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 28: // exp -> exp, Mult, exp
#line 116 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 29: // exp -> exp, Div, exp
#line 121 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 40: // comp -> exp, Comparison, exp
#line 139 "D:\MINICompiler\kompilator.y"
     {
						ComparisonNode node = ValueStack[ValueStack.Depth-2] as ComparisonNode;
						CurrentSemanticValue = AssignToComparisonOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 150 "D:\MINICompiler\kompilator.y"

public int line=1;

public ProgramNode root;

public Stack<BlockNode> blockStack = new Stack<BlockNode>();

public Node current;

public Parser(Scanner scanner) : base(scanner) { }

public void inc() { line++;}

public BinaryOpNode AssignToBinaryOp(BinaryOpNode node, Node left, Node right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	return node;
}

public ComparisonNode AssignToComparisonOp(ComparisonNode node, Node left, Node right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	return node;
}
#line default
}
}
