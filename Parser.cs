// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  REDPC
// DateTime: 17/06/2020 23:19:47
// UserName: MayRe
// Input file <D:\MINICompiler\kompilator.y - 17/06/2020 22:05:48>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MINICompiler;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,Or=5,And=6,
    Comparison=7,Add=8,Sub=9,Mult=10,Div=11,BitOr=12,
    BitAnd=13,Tilde=14,Not=15,IntCast=16,DoubleCast=17,Program=18,
    Write=19,Read=20,If=21,Else=22,While=23,Return=24,
    OpenPar=25,ClosePar=26,OpenBracket=27,CloseBracket=28,Semicolon=29,Eof=30,
    Error=31,Int=32,Double=33,Bool=34,Variable=35,IntVal=36,
    DoubleVal=37,BoolVal=38,String=39};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<Node,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public Node yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Node val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[50];
  private static State[] states = new State[93];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "Anon@1", "block", "Anon@2", "lines", "instruction", 
      "Anon@3", "init", "assign", "write", "read", "exp", "if", "while", };

  static Parser() {
    states[0] = new State(new int[]{18,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2,new int[]{-3,4});
    states[4] = new State(new int[]{27,7},new int[]{-4,5});
    states[5] = new State(new int[]{30,6});
    states[6] = new State(-3);
    states[7] = new State(-4,new int[]{-5,8});
    states[8] = new State(new int[]{32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83,28,-6},new int[]{-6,9,-7,11,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[9] = new State(new int[]{28,10});
    states[10] = new State(-5);
    states[11] = new State(-7,new int[]{-8,12});
    states[12] = new State(new int[]{32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83,28,-6},new int[]{-6,13,-7,11,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[13] = new State(-8);
    states[14] = new State(new int[]{29,15});
    states[15] = new State(-9);
    states[16] = new State(new int[]{35,17});
    states[17] = new State(-19);
    states[18] = new State(new int[]{35,19});
    states[19] = new State(-20);
    states[20] = new State(new int[]{35,21});
    states[21] = new State(-21);
    states[22] = new State(new int[]{29,23});
    states[23] = new State(-10);
    states[24] = new State(new int[]{4,25,29,-30,8,-30,9,-30,10,-30,11,-30,13,-30,12,-30,6,-30,5,-30,7,-30});
    states[25] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,26});
    states[26] = new State(new int[]{8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43,29,-22});
    states[27] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,28});
    states[28] = new State(new int[]{8,-24,9,-24,10,31,11,33,13,35,12,37,6,-24,5,-24,7,-24,29,-24,26,-24});
    states[29] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,30});
    states[30] = new State(new int[]{8,-25,9,-25,10,31,11,33,13,35,12,37,6,-25,5,-25,7,-25,29,-25,26,-25});
    states[31] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,32});
    states[32] = new State(new int[]{8,-26,9,-26,10,-26,11,-26,13,35,12,37,6,-26,5,-26,7,-26,29,-26,26,-26});
    states[33] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,34});
    states[34] = new State(new int[]{8,-27,9,-27,10,-27,11,-27,13,35,12,37,6,-27,5,-27,7,-27,29,-27,26,-27});
    states[35] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,36});
    states[36] = new State(-28);
    states[37] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,38});
    states[38] = new State(-29);
    states[39] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,40});
    states[40] = new State(new int[]{8,27,9,29,10,31,11,33,13,35,12,37,6,-39,5,-39,7,43,29,-39,26,-39});
    states[41] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,42});
    states[42] = new State(new int[]{8,27,9,29,10,31,11,33,13,35,12,37,6,-40,5,-40,7,43,29,-40,26,-40});
    states[43] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,44});
    states[44] = new State(new int[]{8,27,9,29,10,31,11,33,13,35,12,37,6,-41,5,-41,7,-41,29,-41,26,-41});
    states[45] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,46});
    states[46] = new State(new int[]{26,47,8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43});
    states[47] = new State(-23);
    states[48] = new State(-30);
    states[49] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,50});
    states[50] = new State(-31);
    states[51] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,52});
    states[52] = new State(-32);
    states[53] = new State(-33);
    states[54] = new State(-34);
    states[55] = new State(-35);
    states[56] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,57});
    states[57] = new State(-36);
    states[58] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,59});
    states[59] = new State(-37);
    states[60] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,61});
    states[61] = new State(new int[]{8,-38,9,-38,10,31,11,33,13,35,12,37,6,-38,5,-38,7,-38,29,-38,26,-38});
    states[62] = new State(new int[]{29,63});
    states[63] = new State(-11);
    states[64] = new State(new int[]{39,65,25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,66});
    states[65] = new State(-16);
    states[66] = new State(new int[]{8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43,29,-17});
    states[67] = new State(new int[]{29,68});
    states[68] = new State(-12);
    states[69] = new State(new int[]{35,70});
    states[70] = new State(-18);
    states[71] = new State(new int[]{29,72,8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43});
    states[72] = new State(-13);
    states[73] = new State(-14);
    states[74] = new State(new int[]{25,75});
    states[75] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,76});
    states[76] = new State(new int[]{26,77,8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43});
    states[77] = new State(new int[]{27,7,32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83},new int[]{-4,78,-7,89,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[78] = new State(new int[]{22,79,32,-42,33,-42,34,-42,35,-42,19,-42,20,-42,25,-42,16,-42,17,-42,36,-42,37,-42,38,-42,15,-42,14,-42,9,-42,21,-42,23,-42,28,-42});
    states[79] = new State(new int[]{32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83,27,7},new int[]{-7,80,-4,81,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[80] = new State(-45);
    states[81] = new State(-47);
    states[82] = new State(-15);
    states[83] = new State(new int[]{25,84});
    states[84] = new State(new int[]{25,45,35,48,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60},new int[]{-13,85});
    states[85] = new State(new int[]{26,86,8,27,9,29,10,31,11,33,13,35,12,37,6,39,5,41,7,43});
    states[86] = new State(new int[]{27,7,32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83},new int[]{-4,87,-7,88,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[87] = new State(-48);
    states[88] = new State(-49);
    states[89] = new State(new int[]{22,90,32,-43,33,-43,34,-43,35,-43,19,-43,20,-43,25,-43,16,-43,17,-43,36,-43,37,-43,38,-43,15,-43,14,-43,9,-43,21,-43,23,-43,28,-43});
    states[90] = new State(new int[]{32,16,33,18,34,20,35,24,19,64,20,69,25,45,16,49,17,51,36,53,37,54,38,55,15,56,14,58,9,60,21,74,23,83,27,7},new int[]{-7,91,-4,92,-9,14,-10,22,-11,62,-12,67,-13,71,-14,73,-15,82});
    states[91] = new State(-44);
    states[92] = new State(-46);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-3, new int[]{});
    rules[3] = new Rule(-1, new int[]{18,-3,-4,30});
    rules[4] = new Rule(-5, new int[]{});
    rules[5] = new Rule(-4, new int[]{27,-5,-6,28});
    rules[6] = new Rule(-6, new int[]{});
    rules[7] = new Rule(-8, new int[]{});
    rules[8] = new Rule(-6, new int[]{-7,-8,-6});
    rules[9] = new Rule(-7, new int[]{-9,29});
    rules[10] = new Rule(-7, new int[]{-10,29});
    rules[11] = new Rule(-7, new int[]{-11,29});
    rules[12] = new Rule(-7, new int[]{-12,29});
    rules[13] = new Rule(-7, new int[]{-13,29});
    rules[14] = new Rule(-7, new int[]{-14});
    rules[15] = new Rule(-7, new int[]{-15});
    rules[16] = new Rule(-11, new int[]{19,39});
    rules[17] = new Rule(-11, new int[]{19,-13});
    rules[18] = new Rule(-12, new int[]{20,35});
    rules[19] = new Rule(-9, new int[]{32,35});
    rules[20] = new Rule(-9, new int[]{33,35});
    rules[21] = new Rule(-9, new int[]{34,35});
    rules[22] = new Rule(-10, new int[]{35,4,-13});
    rules[23] = new Rule(-13, new int[]{25,-13,26});
    rules[24] = new Rule(-13, new int[]{-13,8,-13});
    rules[25] = new Rule(-13, new int[]{-13,9,-13});
    rules[26] = new Rule(-13, new int[]{-13,10,-13});
    rules[27] = new Rule(-13, new int[]{-13,11,-13});
    rules[28] = new Rule(-13, new int[]{-13,13,-13});
    rules[29] = new Rule(-13, new int[]{-13,12,-13});
    rules[30] = new Rule(-13, new int[]{35});
    rules[31] = new Rule(-13, new int[]{16,-13});
    rules[32] = new Rule(-13, new int[]{17,-13});
    rules[33] = new Rule(-13, new int[]{36});
    rules[34] = new Rule(-13, new int[]{37});
    rules[35] = new Rule(-13, new int[]{38});
    rules[36] = new Rule(-13, new int[]{15,-13});
    rules[37] = new Rule(-13, new int[]{14,-13});
    rules[38] = new Rule(-13, new int[]{9,-13});
    rules[39] = new Rule(-13, new int[]{-13,6,-13});
    rules[40] = new Rule(-13, new int[]{-13,5,-13});
    rules[41] = new Rule(-13, new int[]{-13,7,-13});
    rules[42] = new Rule(-14, new int[]{21,25,-13,26,-4});
    rules[43] = new Rule(-14, new int[]{21,25,-13,26,-7});
    rules[44] = new Rule(-14, new int[]{21,25,-13,26,-7,22,-7});
    rules[45] = new Rule(-14, new int[]{21,25,-13,26,-4,22,-7});
    rules[46] = new Rule(-14, new int[]{21,25,-13,26,-7,22,-4});
    rules[47] = new Rule(-14, new int[]{21,25,-13,26,-4,22,-4});
    rules[48] = new Rule(-15, new int[]{23,25,-13,26,-4});
    rules[49] = new Rule(-15, new int[]{23,25,-13,26,-7});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 22 "D:\MINICompiler\kompilator.y"
                  { ProgramTree.line = line; }
#line default
        break;
      case 3: // start -> Program, Anon@1, block, Eof
#line 23 "D:\MINICompiler\kompilator.y"
      {					
					ProgramTree.block = blockStack.Pop();
				  }
#line default
        break;
      case 4: // Anon@2 -> /* empty */
#line 28 "D:\MINICompiler\kompilator.y"
      {
					BlockNode node = new BlockNode(line);
					blockStack.Push(node);
					CurrentSemanticValue = node;
				  }
#line default
        break;
      case 7: // Anon@3 -> /* empty */
#line 37 "D:\MINICompiler\kompilator.y"
                  { blockStack.Peek().instructions.Add(ValueStack[ValueStack.Depth-1]);}
#line default
        break;
      case 16: // write -> Write, String
#line 49 "D:\MINICompiler\kompilator.y"
    {
					WriteNode node = new WriteNode(line);
					node.content = ValueStack[ValueStack.Depth-1];
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 17: // write -> Write, exp
#line 55 "D:\MINICompiler\kompilator.y"
    {
					WriteNode node = new WriteNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 18: // read -> Read, Variable
#line 62 "D:\MINICompiler\kompilator.y"
    {
					ReadNode node = new ReadNode(line);
					node.target = ValueStack[ValueStack.Depth-1] as VariableNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 19: // init -> Int, Variable
#line 69 "D:\MINICompiler\kompilator.y"
    {
					InitNode node = new InitNode(line);
					node.variable = ValueStack[ValueStack.Depth-1] as VariableNode;
					node.variable.valType = ValType.Int;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 20: // init -> Double, Variable
#line 76 "D:\MINICompiler\kompilator.y"
    {
					InitNode node = new InitNode(line);
					node.variable = ValueStack[ValueStack.Depth-1] as VariableNode;
					node.variable.valType = ValType.Double;
					CurrentSemanticValue = node;
					}
#line default
        break;
      case 21: // init -> Bool, Variable
#line 83 "D:\MINICompiler\kompilator.y"
    {
					InitNode node = new InitNode(line);
					node.variable = ValueStack[ValueStack.Depth-1] as VariableNode;
					node.variable.valType = ValType.Bool;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 22: // assign -> Variable, Assign, exp
#line 91 "D:\MINICompiler\kompilator.y"
    {
					AssignNode node = new AssignNode(line);
					node.left = ValueStack[ValueStack.Depth-3] as VariableNode;
					node.right = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 23: // exp -> OpenPar, exp, ClosePar
#line 100 "D:\MINICompiler\kompilator.y"
    {
					ParenthesisNode node = new ParenthesisNode(line);
					node.content = ValueStack[ValueStack.Depth-2] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 24: // exp -> exp, Add, exp
#line 106 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 25: // exp -> exp, Sub, exp
#line 112 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 26: // exp -> exp, Mult, exp
#line 118 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 27: // exp -> exp, Div, exp
#line 124 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 28: // exp -> exp, BitAnd, exp
#line 130 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 29: // exp -> exp, BitOr, exp
#line 136 "D:\MINICompiler\kompilator.y"
    {
					BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
					node.line = line;
					CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 31: // exp -> IntCast, exp
#line 143 "D:\MINICompiler\kompilator.y"
    {
					IntCastNode node = new IntCastNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 32: // exp -> DoubleCast, exp
#line 149 "D:\MINICompiler\kompilator.y"
    {
					DoubleCastNode node = new DoubleCastNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 36: // exp -> Not, exp
#line 158 "D:\MINICompiler\kompilator.y"
    {
					NotNode node = new NotNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 37: // exp -> Tilde, exp
#line 164 "D:\MINICompiler\kompilator.y"
    {
					NegNode node = new NegNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 38: // exp -> Sub, exp
#line 170 "D:\MINICompiler\kompilator.y"
    {
					MinusNode node = new MinusNode(line);
					node.content = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 39: // exp -> exp, And, exp
#line 176 "D:\MINICompiler\kompilator.y"
    {
					LogicOpNode node = new LogicOpNode(LogicOpType.And, line);
					node.left = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.right = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 40: // exp -> exp, Or, exp
#line 183 "D:\MINICompiler\kompilator.y"
    {
					LogicOpNode node = new LogicOpNode(LogicOpType.Or, line);
					node.left = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.right = ValueStack[ValueStack.Depth-1] as ExpressionNode;
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 41: // exp -> exp, Comparison, exp
#line 190 "D:\MINICompiler\kompilator.y"
    {
					ComparisonNode node = ValueStack[ValueStack.Depth-2] as ComparisonNode;
					node.line = line;
					CurrentSemanticValue = AssignToComparisonOp(node, ValueStack[ValueStack.Depth-3] as ExpressionNode, ValueStack[ValueStack.Depth-1] as ExpressionNode); 
				}
#line default
        break;
      case 42: // if -> If, OpenPar, exp, ClosePar, block
#line 198 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.ifBlock = blockStack.Pop();
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 43: // if -> If, OpenPar, exp, ClosePar, instruction
#line 205 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.ifBlock = ValueStack[ValueStack.Depth-1];
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 44: // if -> If, OpenPar, exp, ClosePar, instruction, Else, instruction
#line 212 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-5] as ExpressionNode;
					node.elseBlock = ValueStack[ValueStack.Depth-1];
					node.ifBlock = ValueStack[ValueStack.Depth-3];
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 45: // if -> If, OpenPar, exp, ClosePar, block, Else, instruction
#line 220 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-5] as ExpressionNode;
					node.elseBlock = ValueStack[ValueStack.Depth-1];
					node.ifBlock = blockStack.Pop();
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 46: // if -> If, OpenPar, exp, ClosePar, instruction, Else, block
#line 228 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-5] as ExpressionNode;
					node.elseBlock = blockStack.Pop();
					node.ifBlock = ValueStack[ValueStack.Depth-3];
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 47: // if -> If, OpenPar, exp, ClosePar, block, Else, block
#line 236 "D:\MINICompiler\kompilator.y"
    {
					IfNode node = new IfNode(line);
					node.check = ValueStack[ValueStack.Depth-5] as ExpressionNode;
					node.elseBlock = blockStack.Pop();
					node.ifBlock = blockStack.Pop();
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 48: // while -> While, OpenPar, exp, ClosePar, block
#line 245 "D:\MINICompiler\kompilator.y"
    {
					WhileNode node = new WhileNode(line);
					node.check = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.block = blockStack.Pop();
					CurrentSemanticValue = node;
				}
#line default
        break;
      case 49: // while -> While, OpenPar, exp, ClosePar, instruction
#line 252 "D:\MINICompiler\kompilator.y"
    {
					WhileNode node = new WhileNode(line);
					node.check = ValueStack[ValueStack.Depth-3] as ExpressionNode;
					node.block = ValueStack[ValueStack.Depth-1];
					CurrentSemanticValue = node;
				}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 261 "D:\MINICompiler\kompilator.y"

public int line {get => ProgramTree.lineCount; }

public ProgramNode ProgramTree;

public Stack<BlockNode> blockStack = new Stack<BlockNode>();

public Parser(Scanner scanner, ProgramNode node) : base(scanner)
{
	ProgramTree = node;
}

public BinaryOpNode AssignToBinaryOp(BinaryOpNode node, ExpressionNode left, ExpressionNode right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	return node;
}

public ComparisonNode AssignToComparisonOp(ComparisonNode node, ExpressionNode left, ExpressionNode right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	return node;
}
#line default
}
}
