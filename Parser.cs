// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  REDPC
// DateTime: 04/06/2020 18:25:37
// UserName: MayRe
// Input file <D:\MINICompiler\kompilator.y - 04/06/2020 18:25:33>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using MINICompiler;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Assign=4,And=5,Or=6,
    Comparison=7,Add=8,Sub=9,Mult=10,Div=11,BitOr=12,
    BitAnd=13,Minus=14,Tilde=15,Not=16,IntCast=17,DoubleCast=18,
    Program=19,Write=20,Read=21,If=22,Else=23,While=24,
    Return=25,Endl=26,OpenPar=27,ClosePar=28,OpenBracket=29,CloseBracket=30,
    Semicolon=31,Eof=32,Error=33,Int=34,Double=35,Bool=36,
    Variable=37,IntVal=38,DoubleVal=39,BoolVal=40,String=41};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<Node,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public Node yylval;
  public LexLocation yylloc;
  public ScanObj( int t, Node val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<Node, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[37];
  private static State[] states = new State[59];
  private static string[] nonTerms = new string[] {
      "start", "$accept", "spaces", "Anon@1", "block", "Anon@2", "Anon@3", "lines", 
      "line", "Anon@4", "init", "assign", "write", "exp", "cast", };

  static Parser() {
    states[0] = new State(new int[]{19,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{26,14,29,-4},new int[]{-3,4});
    states[4] = new State(-2,new int[]{-4,5});
    states[5] = new State(new int[]{29,8},new int[]{-5,6});
    states[6] = new State(new int[]{32,7});
    states[7] = new State(-3);
    states[8] = new State(new int[]{26,14,34,-4,35,-4,36,-4,37,-4,20,-4,27,-4,38,-4,39,-4,40,-4,30,-4},new int[]{-3,9});
    states[9] = new State(-7,new int[]{-7,10});
    states[10] = new State(new int[]{34,21,35,23,36,25,37,29,20,51,27,42,38,46,39,47,40,48,26,56,30,-9},new int[]{-8,11,-9,17,-11,19,-12,27,-13,49,-14,54});
    states[11] = new State(new int[]{30,12});
    states[12] = new State(new int[]{26,14,32,-4},new int[]{-3,13});
    states[13] = new State(-8);
    states[14] = new State(-5,new int[]{-6,15});
    states[15] = new State(new int[]{26,14,29,-4,34,-4,35,-4,36,-4,37,-4,20,-4,27,-4,38,-4,39,-4,40,-4,30,-4,32,-4},new int[]{-3,16});
    states[16] = new State(-6);
    states[17] = new State(new int[]{34,21,35,23,36,25,37,29,20,51,27,42,38,46,39,47,40,48,26,56,30,-9},new int[]{-8,18,-9,17,-11,19,-12,27,-13,49,-14,54});
    states[18] = new State(-10);
    states[19] = new State(new int[]{31,20});
    states[20] = new State(-13);
    states[21] = new State(new int[]{37,22});
    states[22] = new State(-19);
    states[23] = new State(new int[]{37,24});
    states[24] = new State(-20);
    states[25] = new State(new int[]{37,26});
    states[26] = new State(-21);
    states[27] = new State(new int[]{31,28});
    states[28] = new State(-14);
    states[29] = new State(new int[]{4,30,31,-29,8,-29,9,-29,10,-29,11,-29,7,-29});
    states[30] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,31});
    states[31] = new State(new int[]{8,32,9,34,10,36,11,38,7,40,31,-22});
    states[32] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,33});
    states[33] = new State(new int[]{8,-24,9,-24,10,36,11,38,7,-24,31,-24,28,-24});
    states[34] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,35});
    states[35] = new State(new int[]{8,-25,9,-25,10,36,11,38,7,-25,31,-25,28,-25});
    states[36] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,37});
    states[37] = new State(-26);
    states[38] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,39});
    states[39] = new State(-27);
    states[40] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,41});
    states[41] = new State(new int[]{8,32,9,34,10,36,11,38,7,-28,31,-28,28,-28});
    states[42] = new State(new int[]{27,42,37,45,38,46,39,47,40,48},new int[]{-14,43});
    states[43] = new State(new int[]{28,44,8,32,9,34,10,36,11,38,7,40});
    states[44] = new State(-23);
    states[45] = new State(-29);
    states[46] = new State(-30);
    states[47] = new State(-31);
    states[48] = new State(-32);
    states[49] = new State(new int[]{31,50});
    states[50] = new State(-15);
    states[51] = new State(new int[]{41,52,27,42,37,45,38,46,39,47,40,48},new int[]{-14,53});
    states[52] = new State(-17);
    states[53] = new State(new int[]{8,32,9,34,10,36,11,38,7,40,31,-18});
    states[54] = new State(new int[]{31,55,8,32,9,34,10,36,11,38,7,40});
    states[55] = new State(-16);
    states[56] = new State(-11,new int[]{-10,57});
    states[57] = new State(new int[]{34,21,35,23,36,25,37,29,20,51,27,42,38,46,39,47,40,48,26,56,30,-9},new int[]{-8,58,-9,17,-11,19,-12,27,-13,49,-14,54});
    states[58] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-4, new int[]{});
    rules[3] = new Rule(-1, new int[]{19,-3,-4,-5,32});
    rules[4] = new Rule(-3, new int[]{});
    rules[5] = new Rule(-6, new int[]{});
    rules[6] = new Rule(-3, new int[]{26,-6,-3});
    rules[7] = new Rule(-7, new int[]{});
    rules[8] = new Rule(-5, new int[]{29,-3,-7,-8,30,-3});
    rules[9] = new Rule(-8, new int[]{});
    rules[10] = new Rule(-8, new int[]{-9,-8});
    rules[11] = new Rule(-10, new int[]{});
    rules[12] = new Rule(-8, new int[]{26,-10,-8});
    rules[13] = new Rule(-9, new int[]{-11,31});
    rules[14] = new Rule(-9, new int[]{-12,31});
    rules[15] = new Rule(-9, new int[]{-13,31});
    rules[16] = new Rule(-9, new int[]{-14,31});
    rules[17] = new Rule(-13, new int[]{20,41});
    rules[18] = new Rule(-13, new int[]{20,-14});
    rules[19] = new Rule(-11, new int[]{34,37});
    rules[20] = new Rule(-11, new int[]{35,37});
    rules[21] = new Rule(-11, new int[]{36,37});
    rules[22] = new Rule(-12, new int[]{37,4,-14});
    rules[23] = new Rule(-14, new int[]{27,-14,28});
    rules[24] = new Rule(-14, new int[]{-14,8,-14});
    rules[25] = new Rule(-14, new int[]{-14,9,-14});
    rules[26] = new Rule(-14, new int[]{-14,10,-14});
    rules[27] = new Rule(-14, new int[]{-14,11,-14});
    rules[28] = new Rule(-14, new int[]{-14,7,-14});
    rules[29] = new Rule(-14, new int[]{37});
    rules[30] = new Rule(-14, new int[]{38});
    rules[31] = new Rule(-14, new int[]{39});
    rules[32] = new Rule(-14, new int[]{40});
    rules[33] = new Rule(-15, new int[]{17,37});
    rules[34] = new Rule(-15, new int[]{17,-14});
    rules[35] = new Rule(-15, new int[]{18,37});
    rules[36] = new Rule(-15, new int[]{18,-14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Anon@1 -> /* empty */
#line 23 "D:\MINICompiler\kompilator.y"
     {
						root = new ProgramNode();
						current = root;
						root.line = line;
						list.Add(root);						
					}
#line default
        break;
      case 3: // start -> Program, spaces, Anon@1, block, Eof
#line 30 "D:\MINICompiler\kompilator.y"
         {Console.WriteLine("End of file. Lines: " + line);}
#line default
        break;
      case 5: // Anon@2 -> /* empty */
#line 33 "D:\MINICompiler\kompilator.y"
           {inc(); }
#line default
        break;
      case 7: // Anon@3 -> /* empty */
#line 36 "D:\MINICompiler\kompilator.y"
     {
						Console.WriteLine("Opening block."); 
						BlockNode node = new BlockNode(); 
						node.line = line; 
						list.Add(node);
					}
#line default
        break;
      case 8: // block -> OpenBracket, spaces, Anon@3, lines, CloseBracket, spaces
#line 44 "D:\MINICompiler\kompilator.y"
     {
						Console.WriteLine("Closing block.");
					}
#line default
        break;
      case 9: // lines -> /* empty */
#line 48 "D:\MINICompiler\kompilator.y"
          { Console.WriteLine("No more lines"); }
#line default
        break;
      case 11: // Anon@4 -> /* empty */
#line 50 "D:\MINICompiler\kompilator.y"
           {inc();}
#line default
        break;
      case 17: // write -> Write, String
#line 58 "D:\MINICompiler\kompilator.y"
     {
						WriteNode node = new WriteNode(line);
						node.content = ValueStack[ValueStack.Depth-1];
						list.Add(node);
					}
#line default
        break;
      case 18: // write -> Write, exp
#line 64 "D:\MINICompiler\kompilator.y"
     {
						WriteNode node = new WriteNode(line);
						list.Add(node);
					}
#line default
        break;
      case 19: // init -> Int, Variable
#line 70 "D:\MINICompiler\kompilator.y"
     {
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "int";
						list.Add(node);
					}
#line default
        break;
      case 20: // init -> Double, Variable
#line 77 "D:\MINICompiler\kompilator.y"
     {
						Console.WriteLine("Found double init.");
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "double";
						list.Add(node);
					}
#line default
        break;
      case 21: // init -> Bool, Variable
#line 85 "D:\MINICompiler\kompilator.y"
     {
						Console.WriteLine("Found bool init.");
						InitNode node = new InitNode();
						node.variable = (VariableNode)ValueStack[ValueStack.Depth-1];
						node.variable.type = "bool";
						 list.Add(node);
					}
#line default
        break;
      case 22: // assign -> Variable, Assign, exp
#line 94 "D:\MINICompiler\kompilator.y"
     {
						Console.WriteLine("Found assignment.");
						AssignNode node = new AssignNode();
						node.left = (VariableNode)ValueStack[ValueStack.Depth-3];
						node.right = ValueStack[ValueStack.Depth-1];
						node.line = line;
						list.Add(node);
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 23: // exp -> OpenPar, exp, ClosePar
#line 105 "D:\MINICompiler\kompilator.y"
     {
						ParenthesisNode node = new ParenthesisNode();
						node.content = ValueStack[ValueStack.Depth-2];
						list.Add(node);
						CurrentSemanticValue = node;
					}
#line default
        break;
      case 24: // exp -> exp, Add, exp
#line 112 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 25: // exp -> exp, Sub, exp
#line 117 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 26: // exp -> exp, Mult, exp
#line 122 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 27: // exp -> exp, Div, exp
#line 127 "D:\MINICompiler\kompilator.y"
     {
						BinaryOpNode node = ValueStack[ValueStack.Depth-2] as BinaryOpNode;
						CurrentSemanticValue = AssignToBinaryOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
      case 28: // exp -> exp, Comparison, exp
#line 132 "D:\MINICompiler\kompilator.y"
     {
						ComparisonNode node = ValueStack[ValueStack.Depth-2] as ComparisonNode;
						CurrentSemanticValue = AssignToComparisonOp(node, ValueStack[ValueStack.Depth-3] as Node, ValueStack[ValueStack.Depth-1] as Node); 
					}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 148 "D:\MINICompiler\kompilator.y"

public int line=1;

public ProgramNode root;

public List<Node> list = new List<Node>();

public Node current;

public Parser(Scanner scanner) : base(scanner) { }

public void inc() { line++;}

public BinaryOpNode AssignToBinaryOp(BinaryOpNode node, Node left, Node right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	list.Add(node);
	return node;
}

public ComparisonNode AssignToComparisonOp(ComparisonNode node, Node left, Node right)
{
	node.line = line;
	node.left = left;
	node.right = right;
	list.Add(node);
	return node;
}
#line default
}
}
